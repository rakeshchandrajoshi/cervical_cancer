import streamlit as st
import pickle
import numpy as np
import os

# Load model and encoders
MODEL_PATH = "trained_model1.pkl"
with open(MODEL_PATH, "rb") as f:
    model_data = pickle.load(f)

model = model_data["model"]
label_encoders = model_data["label_encoders"]
target_encoder = model_data.get("target_encoder")
feature_columns = model_data["feature_columns"]

# Page configuration
st.set_page_config(page_title="Cervical Cancer Predictor", page_icon="🏥", layout="wide")

# Main Title
st.markdown(
    "<h1 style='text-align: center; color: navy;'>🧬 Cervical Cancer Diagnosis Application</h1>",
    unsafe_allow_html=True
)
st.markdown(
    "<p style='text-align: center; color: gray; font-size:18px;'>AI-Powered Health Screening Tool for Cervical Cancer Risk Assessment</p>",
    unsafe_allow_html=True
)

# Image
if os.path.exists("cervical.jpeg"):
    st.image("cervical.jpeg", caption="Generated by DALL·E", use_container_width=True)
else:
    st.warning("Image 'cervical.jpeg' not found in the current directory.")

# Sidebar
with st.sidebar:
    st.header("👩‍⚕️ Patient Details")
    user_name = st.text_input("📝 Name")
    user_location = st.text_input("📍 Location")
    st.markdown("---")
    st.info("Please provide accurate information for better predictions.")

# Use Tabs for navigation
tab1, tab2 = st.tabs(["🧾 Input Form", "📊 Prediction Result"])

with tab1:
    with st.form("cervical_form"):
        col1, col2, col3 = st.columns(3)

        with col1:
            gender = st.radio("Gender", ["Female", "Male"])
            Age = st.slider("Age", 1, 110, 30)
            PoR = st.radio("Place of Residence", ["Rural", "Urban"])
            ES = st.radio("Educational Status", ["Illiterate", "Literate"])
            SES = st.radio("Socio-economic Status", ["Lower", "Middle", "Upper"])

        with col2:
            Parity = st.radio("Parity", ["None", "≤2", "more_than_2"])
            AgefirstP = st.radio("Age at First Full-Term Pregnancy", ["≤20", "more_than_20"])
            MC = st.radio("Menstrual Cycle", ["Regular", "Irregular"])
            MH = st.radio("Menstrual Hygiene", ["Napkin", "Cloths"])
            Contraception = st.radio("Use of Contraception", ["Oral contraceptive pills", "Others"])

        with col3:
            Smoking = st.radio("Smoking", ["Passive", "Active"])
            HRHPV = st.radio("High-risk HPV", ["Negative", "Positive"])
            IL6 = st.radio("IL6", ['GG', 'AA', 'AG'])
            IL1beta = st.radio("IL1beta", ['TT', 'CT', 'CC'])
            TNFalpha = st.radio("TNFalpha", ['GG', 'AA', 'GA'])
            IL1RN = st.selectbox("IL1RN", ['I I', 'II II', 'I II', 'I IV', 'II III', 'I III', 'II IV'])

        submitted = st.form_submit_button("🔍 Predict")

with tab2:
    if submitted:
        # Encode input
        encoded_input = []
        for feature in feature_columns:
            value = st.session_state.get(feature)
            if value in label_encoders.get(feature, {}):
                encoded_input.append(label_encoders[feature].transform([value])[0])
            else:
                encoded_input.append(value)

        # Prediction input
        input_data = np.array([encoded_input])
        result = model.predict(input_data)

        st.markdown("### 🧪 Prediction Result")
        patient_display = user_name.strip() if user_name else "Patient"

        if result[0] == 1:
            st.error(f"🔬 {patient_display}, you may have a risk of Cervical Cancer.")
            st.markdown("**📍 Suggested Specialists:**")
            st.markdown("- 🔹 [Primary Care Provider](https://www.google.com/search?q=Primary+Care+Provider+near+me)")
            st.markdown("- 🔹 [Radiation Oncologist](https://www.google.com/search?q=Radiation+Oncologist+near+me)")
        else:
            st.success(f"✅ {patient_display}, no indication of Cervical Cancer risk was found.")
            st.balloons()
