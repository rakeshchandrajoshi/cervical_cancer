import streamlit as st
import pickle
import pandas as pd
import numpy as np
import os

# Load model and encoders
MODEL_PATH = "trained_model.pkl"
with open(MODEL_PATH, "rb") as f:
    model_data = pickle.load(f)

model = model_data["model"]
feature_columns = model_data["feature_columns"]
label_encoders = model_data.get("label_encoders", {})
target_encoder = model_data.get("target_encoder")

# Page configuration
st.set_page_config(page_title="Cervical Cancer Predictor", page_icon="üè•", layout="wide")

# Title and description
st.markdown(
    "<h1 style='text-align: center; color: navy;'>üß¨ Cervical Cancer Diagnosis Application</h1>",
    unsafe_allow_html=True
)
st.markdown(
    "<p style='text-align: center; color: gray; font-size:18px;'>AI-Powered Health Screening Tool for Cervical Cancer Risk Assessment</p>",
    unsafe_allow_html=True
)

# Image
if os.path.exists("cervical.jpeg"):
    st.image("cervical.jpeg", caption="Generated by DALL¬∑E", use_container_width=True)

# Sidebar for patient info
with st.sidebar:
    st.header("üë©‚Äç‚öïÔ∏è Patient Details")
    user_name = st.text_input("üìù Name")
    user_location = st.text_input("üìç Location")
    st.markdown("---")
    st.info("Please provide accurate information for better predictions.")

# Tabs
tab1, tab2 = st.tabs(["üßæ Input Form", "üìä Prediction Result"])

with tab1:
    with st.form("cervical_form"):
        col1, col2, col3 = st.columns(3)

        with col1:
            gender = st.radio("Gender", ["Female", "Male"])
            Age = st.slider("Age", 1, 110, 30)
            PoR = st.radio("Place of Residence", ["Rural", "Urban"])
            ES = st.radio("Educational Status", ["Illiterate", "Literate"])
            SES = st.radio("Socio-economic Status", ["Lower", "Middle", "Upper"])

        with col2:
            Parity = st.radio("Parity", ["None", "‚â§2", "more_than_2"])
            AgefirstP = st.radio("Age at First Full-Term Pregnancy", ["‚â§20", "more_than_20"])
            MC = st.radio("Menstrual Cycle", ["Regular", "Irregular"])
            MH = st.radio("Menstrual Hygiene", ["Napkin", "Cloths"])
            Contraception = st.radio("Use of Contraception", ["Oral contraceptive pills", "Others"])

        with col3:
            Smoking = st.radio("Smoking", ["Passive", "Active"])
            HRHPV = st.radio("High-risk HPV", ["Negative", "Positive"])
            IL6 = st.radio("IL6", ['GG', 'AA', 'AG'])
            IL1beta = st.radio("IL1beta", ['TT', 'CT', 'CC'])
            TNFalpha = st.radio("TNFalpha", ['GG', 'AA', 'GA'])
            IL1RN = st.selectbox("IL1RN", ['I I', 'II II', 'I II', 'I IV', 'II III', 'I III', 'II IV'])

        submitted = st.form_submit_button("üîç Predict")

with tab2:
    if submitted:
        # Encode inputs
        input_dict = {
            "Age": Age,
            "PoR": 2 if PoR == "Urban" else 1,
            "ES": 2 if ES == "Literate" else 1,
            "SES": {"Lower": 3, "Middle": 2, "Upper": 1}[SES],
            "Parity": {"None": 1, "‚â§2": 2, "more_than_2": 3}[Parity],
            "AgefirstP": 1 if AgefirstP == "‚â§20" else 2,
            "MC": 1 if MC == "Regular" else 2,
            "MH": 1 if MH == "Napkin" else 2,
            "Contraception": 1 if Contraception == "Others" else 2,
            "Smoking": 1 if Smoking == "Active" else 2,
            "HRHPV": 2 if HRHPV == "Positive" else 1,
            "IL6": {"AG": 1, "AA": 0, "GG": 2}[IL6],
            "IL1beta": {"TT": 2, "CT": 1, "CC": 0}[IL1beta],
            "TNFalpha": {"GG": 2, "AA": 0, "GA": 1}[TNFalpha],
            "IL1RN": {
                'I I': 0, 'II II': 4, 'I II': 1, 'I IV': 3, 'II III': 5, 'I III': 2, 'II IV': 6
            }.get(IL1RN, 0)
        }

        # Fill missing features with 0
        for col in feature_columns:
            if col not in input_dict:
                input_dict[col] = 0

        # Create DataFrame in correct order
        input_df = pd.DataFrame([input_dict])[feature_columns]

        # Predict
        try:
            result = model.predict(input_df)
        except Exception as e:
            st.error(f"Prediction failed: {e}")
            st.stop()

        # Show result
        st.markdown("### üß™ Prediction Result")
        patient_display = user_name.strip() if user_name else "Patient"

        if gender == "Male":
            st.warning("‚ö†Ô∏è This prediction tool is intended for biological females. Your result may be invalid.")
        elif result[0] == 1:
            st.error(f"üî¨ {patient_display}, you may have a risk of Cervical Cancer.")
            st.markdown("**üìç Suggested Specialists:**")
            st.markdown("- üîπ [Primary Care Provider](https://www.google.com/search?q=Primary+Care+Provider+near+me)")
            st.markdown("- üîπ [Radiation Oncologist](https://www.google.com/search?q=Radiation+Oncologist+near+me)")
        else:
            st.success(f"‚úÖ {patient_display}, no indication of Cervical Cancer risk was found.")
            st.balloons()
